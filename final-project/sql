CREATE DATABASE pharmacy_portal_db;


    CREATE TABLE Users (
        userId INT NOT NULL UNIQUE AUTO_INCREMENT,
        userName VARCHAR(45) NOT NULL UNIQUE,
        contactInfo VARCHAR(200),
        passwordHash VARCHAR(255),
        userType ENUM('pharmacist', 'patient') NOT NULL,
        PRIMARY KEY (userId)
    );
    


    CREATE TABLE Medications (
        medicationId INT NOT NULL UNIQUE AUTO_INCREMENT,
        medicationName VARCHAR(45) NOT NULL,
        dosage VARCHAR(45) NOT NULL,
        manufacturer VARCHAR(100),
        PRIMARY KEY (medicationId)
    );
    


    CREATE TABLE Prescriptions (
        prescriptionId INT NOT NULL UNIQUE AUTO_INCREMENT,
        userId INT NOT NULL,
        medicationId INT NOT NULL,
        prescribedDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
        dosageInstructions VARCHAR(200),
        quantity INT NOT NULL,
        refillCount INT DEFAULT 0,
        PRIMARY KEY (prescriptionId),
        FOREIGN KEY (userId) REFERENCES Users(userId),
        FOREIGN KEY (medicationId) REFERENCES Medications(medicationId)
    );
    


    CREATE TABLE Inventory (
        inventoryId INT NOT NULL UNIQUE AUTO_INCREMENT,
        medicationId INT NOT NULL,
        quantityAvailable INT NOT NULL,
        lastUpdated DATETIME NOT NULL,
        PRIMARY KEY (inventoryId),
        FOREIGN KEY (medicationId) REFERENCES Medications(medicationId)
    );
    


    CREATE TABLE Sales (
        saleId INT NOT NULL UNIQUE AUTO_INCREMENT,
        prescriptionId INT NOT NULL,
        saleDate DATETIME NOT NULL,
        quantitySold INT NOT NULL,
        saleAmount DECIMAL(10, 2) NOT NULL,
        PRIMARY KEY (saleId),
        FOREIGN KEY (prescriptionId) REFERENCES Prescriptions(prescriptionId)
    );
    


    DELIMITER //

    CREATE PROCEDURE AddOrUpdateUser(
        IN p_userId INT,
        IN p_userName VARCHAR(45),
        IN p_contactInfo VARCHAR(200),
        IN p_userType ENUM('pharmacist', 'patient')
    )
    BEGIN
        DECLARE user_exists INT DEFAULT 0;

        IF p_userId IS NOT NULL THEN
            SELECT COUNT(*) INTO user_exists FROM Users WHERE userId = p_userId;

            IF user_exists > 0 THEN
                UPDATE Users 
                SET 
                    userName = p_userName,
                    contactInfo = p_contactInfo,
                    userType = p_userType
                WHERE userId = p_userId;
            ELSE
                INSERT INTO Users (userId, userName, contactInfo, userType)
                VALUES (p_userId, p_userName, p_contactInfo, p_userType);
            END IF;
        ELSE
            SELECT COUNT(*) INTO user_exists FROM Users WHERE userName = p_userName;

            IF user_exists > 0 THEN
                UPDATE Users 
                SET 
                    contactInfo = p_contactInfo,
                    userType = p_userType
                WHERE userName = p_userName;
            ELSE
                INSERT INTO Users (userName, contactInfo, userType)
                VALUES (p_userName, p_contactInfo, p_userType);
            END IF;
        END IF;
    END //

    DELIMITER ;
    


    DELIMITER //

    CREATE PROCEDURE ProcessSale(
        IN p_prescriptionId INT,
        IN p_quantitySold INT
    )
    BEGIN
        DECLARE v_medicationId INT;
        DECLARE v_currentQuantity INT;
        DECLARE v_saleAmount DECIMAL(10, 2);
        DECLARE v_medication_price DECIMAL(10, 2);

        SELECT medicationId INTO v_medicationId 
        FROM Prescriptions 
        WHERE prescriptionId = p_prescriptionId;

        SELECT quantityAvailable INTO v_currentQuantity 
        FROM Inventory 
        WHERE medicationId = v_medicationId;

        SET v_medication_price = 10.00;
        SET v_saleAmount = p_quantitySold * v_medication_price;

        IF v_currentQuantity >= p_quantitySold THEN
            START TRANSACTION;

            UPDATE Inventory 
            SET 
                quantityAvailable = quantityAvailable - p_quantitySold,
                lastUpdated = NOW()
            WHERE medicationId = v_medicationId;

            INSERT INTO Sales (prescriptionId, saleDate, quantitySold, saleAmount)
            VALUES (p_prescriptionId, NOW(), p_quantitySold, v_saleAmount);

            COMMIT;

            SELECT 'Sale processed successfully' AS message;
        ELSE
            SELECT 'Insufficient inventory' AS message;
        END IF;
    END //

    DELIMITER ;
    


    CREATE OR REPLACE VIEW MedicationInventoryView AS
    SELECT 
        m.medicationId,
        m.medicationName,
        m.dosage,
        m.manufacturer,
        COALESCE(i.quantityAvailable, 0) AS quantityAvailable,
        COALESCE(i.lastUpdated, 'Never updated') AS lastUpdated
    FROM 
        Medications m
    LEFT JOIN 
        Inventory i ON m.medicationId = i.medicationId;
    


    DELIMITER //

    CREATE TRIGGER AfterPrescriptionInsert 
    AFTER INSERT ON Prescriptions
    FOR EACH ROW
    BEGIN
        DECLARE v_quantityAvailable INT;
        DECLARE v_low_stock_threshold INT DEFAULT 5;

        SELECT COUNT(*) INTO @medication_exists 
        FROM Inventory 
        WHERE medicationId = NEW.medicationId;

        IF @medication_exists > 0 THEN
            UPDATE Inventory
            SET 
                quantityAvailable = quantityAvailable - NEW.quantity,
                lastUpdated = NOW()
            WHERE medicationId = NEW.medicationId;

            SELECT quantityAvailable INTO v_quantityAvailable
            FROM Inventory
            WHERE medicationId = NEW.medicationId;

            IF v_quantityAvailable <= v_low_stock_threshold THEN
                SIGNAL SQLSTATE '45000' 
                SET MESSAGE_TEXT = 'Warning: Medication inventory is low after prescription processing';
            END IF;
        ELSE
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Error: Medication not found in inventory';
        END IF;
    END //

    DELIMITER ;
    
